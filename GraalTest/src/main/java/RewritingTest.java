import java.io.File;import fr.lirmm.graphik.graal.api.core.ConjunctiveQuery;import fr.lirmm.graphik.graal.api.core.Substitution;import fr.lirmm.graphik.graal.api.kb.Approach;import fr.lirmm.graphik.graal.api.kb.KnowledgeBase;import fr.lirmm.graphik.graal.io.dlp.DlgpParser;import fr.lirmm.graphik.graal.io.dlp.DlgpWriter;import fr.lirmm.graphik.graal.kb.KBBuilder;import fr.lirmm.graphik.graal.store.rdbms.driver.PostgreSQLDriver;import fr.lirmm.graphik.graal.store.rdbms.driver.SqliteDriver;import fr.lirmm.graphik.graal.store.rdbms.natural.NaturalRDBMSStore;import fr.lirmm.graphik.util.Prefix;import fr.lirmm.graphik.util.stream.CloseableIterator;public class RewritingTest {    private static String rootDir = "./GraalTest/";    private static final String dbFilepath = "ThirdTest.db";    private static final String ontoFilepath = "ThirdTest.dlp";    public static void main(String args[]) throws Exception {        // 0 - Create a DLGP writer to display the rewritings        DlgpWriter writer = new DlgpWriter();        // Define some prefixes        writer.write(new Prefix("class", ""));        writer.write(new Prefix("attribute", ""));        writer.write(new Prefix("relationship", ""));        writer.write(new Prefix("", ""));        // Create a query from a Java string        ConjunctiveQuery query = DlgpParser.parseQuery("@prefix class: <>\n"                + "        @prefix attribute: <>\n"                + "        @prefix relationship: <>\n"                + "        @prefix : <>\n"                + "?(FN, LN, Age, Z) :- attribute:Age(X,Age), attribute:FN(X,FN), attribute:LN(X,LN), relationship:works_at(X,Y), attribute:Address(Y, Z).");        //  Print the query        writer.write("\n= Query =\n");        writer.write(query);        // Configure and create KB        KBBuilder kbb = new KBBuilder();        kbb.setStore(new NaturalRDBMSStore(new SqliteDriver(new File(rootDir, dbFilepath))));//        kbb.setStore(new NaturalRDBMSStore(new PostgreSQLDriver("103.61.226.39:5432", "datalog_test", "postgres", "unisa")));        kbb.addRules(new DlgpParser(new File(rootDir, ontoFilepath)));        kbb.setApproach(Approach.REWRITING_FIRST);        KnowledgeBase kb = kbb.build();        // Print KB        writer.write("= FACTS =\n");        writer.write(kb.getFacts());        writer.write("= RULES =\n");        writer.write(kb.getOntology());        // Query KB        writer.write("\n= Answers =\n");        CloseableIterator<Substitution> results = kb.query(query);        if (results.hasNext()) {            do {                writer.write(results.next());            } while (results.hasNext());        } else {            writer.write("No answers.\n");        }        results.close();        kb.close();        writer.close();    }}